#--------设备信息描述-------------------------
#安装位置： 墙壁
#设备样式：86盒面板主控  
#主要功能：3开，6按键，6指示灯固件, web:admin  "12",  hass显示：上3健，上3指示灯，下三继电器
#接入方式：api
#设备ip：  自动获取
#设备接口：
<<: !include config.yaml
packages:
  configmqtt: !include configmqtt.yaml
#  configblue: !include blue.yaml
  deviceinfo: !include  deviceinfo.yaml
#0,2,4,5,12,15最好不用
#34，35，36，39没有内部拉高
#spi flash 6，7，8，9，10，11 不能使用
#21，22为硬件i2c
#触控4，0，2，12，13，14，15，27，33，32
#1，2，3，4，0，5
substitutions:
  mqtt_server_1: !secret mqtt_server_
  mqtt_port_1: !secret mqtt_port_
  mqtt_user_1: !secret mqtt_user_
  mqtt_password_1: !secret mqtt_password_
  mqtt_prefix_1: !secret mqtt_prefix_
  sun_latitude_1: !secret latitude_
  sun_longitude_1 : !secret longitude_
  version_date_1 : !secret version_date_
  

  key_1:  GPIO26  #外部拉高
  key_2:  GPIO27  #外部拉高
  key_3:  GPIO18  #外部拉高
  key_4:  GPIO0  #外部拉高
  key_5:  GPIO17  #外部拉高
  key_6:  GPIO25  #外部拉高
  relay_s: 0.05s

  light_pin_1: GPIO32


  relay_pin_3_1: GPIO23
  relay_pin_3_2: GPIO22

  relay_pin_2_1: GPIO16
  relay_pin_2_2: GPIO21

  relay_pin_1_1: GPIO13
  relay_pin_1_2: GPIO19

  relay_state_1: GPIO34
  relay_state_2: GPIO39
  relay_state_3: GPIO36


  config_version: 'esp32-solo_ws2812-cbc-6b-1r_mqtt-idf_${version_date_1}' #安装位置：GPIO   如：卧室：L:1/2 DS:2
  device_name: esp32-6b-1r   #esp+按键+继电器（插座Socket+设备rtu）
 
esphome:
  name: $device_name
  name_add_mac_suffix: yes #允许用户编译单个二进制文件来闪存许多相同的设备，并且它们都将具有唯一的名称/主机名
  on_boot: 
    - priority: 300
      then:
        - lambda: |-
              id(mqtt_client).set_broker_address(id(g_address));
              id(mqtt_client).set_broker_port(id(g_port));
              id(mqtt_client).set_username(id(g_username));
              id(mqtt_client).set_password(id(g_password));
              id(mqtt_client).set_discovery_info(id(g_prefix).c_str(), mqtt::MQTT_MAC_ADDRESS_UNIQUE_ID_GENERATOR, mqtt::MQTT_DEVICE_NAME_OBJECT_ID_GENERATOR, true);
              id(mqtt_client).set_topic_prefix(App.get_name());

              id(mqtt_client).set_birth_message(mqtt::MQTTMessage{
                  .topic = App.get_name() + "/" + "status",
                  .payload = "online",
                  .qos = 1,
                  .retain = true,
              });
              id(mqtt_client).set_last_will(mqtt::MQTTMessage{
                  .topic = App.get_name() + "/" + "status",
                  .payload = "offline",
                  .qos = 1,
                  .retain = true,
              });
              id(mqtt_client).set_log_message_template(mqtt::MQTTMessage{
                  .topic = App.get_name() + "/" + "status",
                  .payload = "offline",
                  .qos = 1,
                  .retain = true,
              });

              id(sun_sun).set_latitude(id(g_sun_latitude));
              id(sun_sun).set_longitude(id(g_sun_longitude));


    - priority: -100
      then:
        - light.turn_off: ws_light
        - output.turn_off: out_relay1_1
        - output.turn_off: out_relay1_2
        - select.set_index:
            id: light_select
            index: !lambda |-
                    return 0;
        - number.set:
            id: red_set
            value: !lambda |-
                    return id(l1_on)[0];
        - number.set:
            id: green_set
            value: !lambda |-
                    return id(l1_on)[1];
        - number.set:
            id: blue_set
            value: !lambda |-
                    return id(l1_on)[2];
        - number.set:
            id: brightness_set
            value: !lambda |-
                    return id(brightness_on);
        - lambda: |-
            auto index = id(power_mode).active_index();
            switch(index.value()+1)
              {
              case 0:{
                      id(relay_L1).turn_off();
                      break;
                            }
              case 1:{
                      id(relay_L1).turn_on();
                      break;
                            }
              default:{
                      break;
                            }
              } 
        - select.set_index:
            id: button_select
            index: !lambda |-
                    return 0;
        - delay: 1000ms
        - lambda: |-
            id(init_led).press();
            id(init_system)=1;
   


globals:
  - id: g_address
    type:  std::string
    initial_value: '"$mqtt_server_1"'
    restore_value: true


  - id: g_port
    type: int
    initial_value: '$mqtt_port_1'
    restore_value: false

  - id: g_username
    type:  std::string
    initial_value: '"$mqtt_user_1"'
    restore_value: false

  - id: g_password
    type:  std::string
    initial_value: '"$mqtt_password_1"'
    restore_value: false

  - id: g_prefix
    type:  std::string
    initial_value: '"$mqtt_prefix_1"'
    restore_value: true

  - id: g_sun_latitude
    type:  float
    initial_value: '$sun_latitude_1'   
    restore_value: true

  - id: g_sun_longitude
    type:  float
    initial_value: '$sun_longitude_1'
    restore_value: true


  - id: flag_r1_state    #设置全局变量，情景模式控制
    type: int
    restore_value: yes

  - id: init_system    #设置全局变量，情景模式控制
    type: int
    initial_value: "0"



  - id: l1_on
    type: int[3]
    restore_value: yes
    initial_value: "{255,0,0}"
  - id: l2_on
    type: int[3]
    restore_value: yes
    initial_value: "{255,0,0}"
  - id: l3_on
    type: int[3]
    restore_value: yes
    initial_value: "{255,0,0}"
  - id: l4_on
    type: int[3]
    restore_value: yes
    initial_value: "{255,0,0}"
  - id: l5_on
    type: int[3]
    restore_value: yes
    initial_value: "{255,0,0}"
  - id: l6_on
    type: int[3]
    restore_value: yes
    initial_value: "{255,0,0}"
  - id: backlight_on
    type: int[3]
    restore_value: yes
    initial_value: "{255,0,0}"
  - id: brightness_on
    type: int
    restore_value: yes
    initial_value: "255"
  - id: sun_flag    #设置全局变量，情景模式控制
    type: int
    initial_value: "1"




button:
  - platform: template
    internal: true
    name: "init_led"
    id: init_led
    on_press:
      then: 
      - if:
          condition:
            light.is_on: light_up_left
          then:
            light.turn_on: light_up_left
          else:
            light.turn_off: light_up_left

      - if:
          condition:
            light.is_on: light_up_mid
          then:
            light.turn_on: light_up_mid
          else:
            light.turn_off: light_up_mid

      - if:
          condition:
            light.is_on: light_up_right
          then:
            light.turn_on: light_up_right
          else:
            light.turn_off: light_up_right

      - if:
          condition:
            light.is_on: light_down_left
          then:
            light.turn_on: light_down_left
          else:
            light.turn_off: light_down_left

      - if:
          condition:
            light.is_on: light_down_mid
          then:
            light.turn_on: light_down_mid
          else:
            light.turn_off: light_down_mid

      - if:
          condition:
            light.is_on: light_down_right
          then:
            light.turn_on: light_down_right
          else:
            light.turn_off: light_down_right

      - if:
          condition:
            light.is_on: _light_back
          then:
            light.turn_on: _light_back
          else:
            light.turn_off: _light_back     

select:
  - platform: template
    name: "sun_mode"
    id: "sun_mode"
    optimistic: true
    restore_value: true
    options:
      - 开
      - 关闭一次
      - 彻底关闭


  - platform: template
    name: "power_mode"
    id: "power_mode"
    optimistic: true
    restore_value: true
    options:
      - 全关
      - 全开
      - 断电前状态

  - platform: template
    name: "relay_L1_connect"
    id: "switch1_connect"
    optimistic: true
    restore_value: true
    options:
      - 上左按钮
      - 上中按钮
      - 上右按钮
      - 下左按钮
      - 下中按钮
      - 下右按钮
      - 不关联


  - platform: template
    name: "switch_Effect"
    id: "switch_Effect"
    optimistic: true
    options:
      - 关闭灯效
      - addressable_rainbow
      - addressable_color_wipe
      - addressable_scan
      - addressable_twinkle
      - addressable_random_twinkle
    on_value:
      then:
        - lambda: |-
            if (id(init_system)){
              switch(i)
              {
              case 0:{
                  auto call = id(ws_light).turn_on();
                  call.set_effect(0);
                  call.perform();
                  break;
                  }
              case 1:{
                auto call = id(ws_light).turn_on();
                call.set_effect(1);
                call.perform();
                      break;
                  }
              case 2:{
                auto call = id(ws_light).turn_on();
                call.set_effect(2);
                call.perform();
                      break;
                  }
              case 3:{
                auto call = id(ws_light).turn_on();
                call.set_effect(3);
                call.perform();
                      break;
                  }
              case 4:{
                auto call = id(ws_light).turn_on();
                call.set_effect(4);
                call.perform();
                      break;
                  }
              case 5:{
                auto call = id(ws_light).turn_on();
                call.set_effect(5);
                call.perform();
                      break;
                  }
              default:{
                      break;
                            }
              }
            }
        - delay: 1000ms
        - lambda: id(init_led).press();



  - platform: template
    name: "light_select"
    id: "light_select"
    optimistic: true
    restore_value: true
    options:
      - 上左
      - 上中
      - 上右
      - 下左
      - 下中
      - 下右
      - 背光
      - 全部
    on_value:
      then:
        - lambda: |-
            if (id(init_system)){
              switch(i)
              {
              case 0:{
                  ESP_LOGD("ble_adv", "    red :%d: green:%d blue:%d", id(l1_on)[0], id(l1_on)[1],id(l1_on)[2]);
  
                  auto call_red = id(red_set).make_call();
                  call_red.set_value(id(l1_on)[0]);
                  call_red.perform();
  
                  auto call_green = id(green_set).make_call();
                  call_green.set_value(id(l1_on)[1]);
                  call_green.perform();
  
                  auto call_blue = id(blue_set).make_call();
                  call_blue.set_value(id(l1_on)[2]);
                  call_blue.perform();
  
                  break;
                      }
              case 1:{
                  ESP_LOGD("ble_adv", "    red :%d: green:%d blue:%d", id(l2_on)[0], id(l2_on)[1],id(l2_on)[2]);
                  auto call_red = id(red_set).make_call();
                  call_red.set_value(id(l2_on)[0]);
                  call_red.perform();
                  auto call_green = id(green_set).make_call();
                  call_green.set_value(id(l2_on)[1]);
                  call_green.perform();
                  auto call_blue = id(blue_set).make_call();
                  call_blue.set_value(id(l2_on)[2]);
                  call_blue.perform();
                  
                  break;
                      }
              case 2:{
                  ESP_LOGD("ble_adv", "    red :%d: green:%d blue:%d", id(l3_on)[0], id(l3_on)[1],id(l3_on)[2]);
                  auto call_red = id(red_set).make_call();
                  call_red.set_value(id(l3_on)[0]);
                  call_red.perform();
                  auto call_green = id(green_set).make_call();
                  call_green.set_value(id(l3_on)[1]);
                  call_green.perform();
                  auto call_blue = id(blue_set).make_call();
                  call_blue.set_value(id(l3_on)[2]);
                  call_blue.perform();
                  
                  break;
                      }
              case 3:{
                  ESP_LOGD("ble_adv", "    red :%d: green:%d blue:%d", id(l4_on)[0], id(l4_on)[1],id(l4_on)[2]);
                  auto call_red = id(red_set).make_call();
                  call_red.set_value(id(l4_on)[0]);
                  call_red.perform();
                  auto call_green = id(green_set).make_call();
                  call_green.set_value(id(l4_on)[1]);
                  call_green.perform();
                  auto call_blue = id(blue_set).make_call();
                  call_blue.set_value(id(l4_on)[2]);
                  call_blue.perform();
                  
                  break;
                      }
              case 4:{
                  ESP_LOGD("ble_adv", "    red :%d: green:%d blue:%d", id(l5_on)[0], id(l5_on)[1],id(l5_on)[2]);
                  auto call_red = id(red_set).make_call();
                  call_red.set_value(id(l5_on)[0]);
                  call_red.perform();
                  auto call_green = id(green_set).make_call();
                  call_green.set_value(id(l5_on)[1]);
                  call_green.perform();
                  auto call_blue = id(blue_set).make_call();
                  call_blue.set_value(id(l5_on)[2]);
                  call_blue.perform();
                  
                  break;
                      }
              case 5:{
                  ESP_LOGD("ble_adv", "    red :%d: green:%d blue:%d", id(l6_on)[0], id(l6_on)[1],id(l6_on)[2]);
  
                  auto call_red = id(red_set).make_call();
                  call_red.set_value(id(l6_on)[0]);
                  call_red.perform();
  
                  auto call_green = id(green_set).make_call();
                  call_green.set_value(id(l6_on)[1]);
                  call_green.perform();
  
                  auto call_blue = id(blue_set).make_call();
                  call_blue.set_value(id(l6_on)[2]);
                  call_blue.perform();
                  
                  break;
                      }
              case 6:{
                  ESP_LOGD("ble_adv", "    red :%d: green:%d blue:%d", id(backlight_on)[0], id(backlight_on)[1],id(backlight_on)[2]);
                  auto call_red = id(red_set).make_call();
                  call_red.set_value(id(backlight_on)[0]);
                  call_red.perform();
                  auto call_green = id(green_set).make_call();
                  call_green.set_value(id(backlight_on)[1]);
                  call_green.perform();
                  auto call_blue = id(blue_set).make_call();
                  call_blue.set_value(id(backlight_on)[2]);
                  call_blue.perform();
                  
                  break;
                      }
              default:{
                      break;
                            }
              }
            }
number:
  - platform: template
    name: "color_brightness_set"
    id: "brightness_set"
    optimistic: true
    min_value: 0
    max_value: 255
    step: 1
    set_action:
      then:
        - lambda: id(brightness_on)=x;
        - lambda: |-
            auto call = id(ws_light).turn_on();
            call.set_brightness(float(id(brightness_on))/256);
            call.perform();
            delay(1000);
            id(init_led).press();

            

  - platform: template
    name: "color_red_set"
    id: "red_set"
    optimistic: true
    min_value: 0
    max_value: 255
    step: 1
    set_action:
      then:
        - lambda: |-
            auto index = id(light_select).active_index();
            switch(index.value())
            {
            case 0:{
                id(l1_on)[0] = x;
                break;
                    }
            case 1:{
                id(l2_on)[0] = x;
                break;
                    }
            case 2:{
                id(l3_on)[0] = x;
                break;
                    }
            case 3:{
                id(l4_on)[0] = x;
                break;
                    }
            case 4:{
                id(l5_on)[0] = x;
                break;
                    }
            case 5:{
                id(l6_on)[0] = x;
                break;
                    }
            case 6:{
                id(backlight_on)[0] = x;
                break;
                    }
            case 7:{
                id(l1_on)[0] = x;
                id(l2_on)[0] = x;
                id(l3_on)[0] = x;
                id(l4_on)[0] = x;
                id(l5_on)[0] = x;
                id(l6_on)[0] = x;
                break;
                    }
            default:{
                    break;
                          }
            }
        
        - lambda: id(init_led).press();

  - platform: template
    name: "color_green_set"
    id: "green_set"
    optimistic: true
    min_value: 0
    max_value: 255
    step: 1
    set_action:
      then:
        - lambda: |-
            auto index = id(light_select).active_index();
            switch(index.value())
            {
            case 0:{
                id(l1_on)[1] = x;
                break;
                    }
            case 1:{
                id(l2_on)[1] = x;
                break;
                    }
            case 2:{
                id(l3_on)[1] = x;
                break;
                    }
            case 3:{
                id(l4_on)[1] = x;
                break;
                    }
            case 4:{
                id(l5_on)[1] = x;
                break;
                    }
            case 5:{
                id(l6_on)[1] = x;
                break;
                    }
            case 6:{
                id(backlight_on)[1] = x;
                break;
                    }
            case 7:{
                id(l1_on)[1] = x;
                id(l2_on)[1] = x;
                id(l3_on)[1] = x;
                id(l4_on)[1] = x;
                id(l5_on)[1] = x;
                id(l6_on)[1] = x;
                break;
                    }
            default:{
                    break;
                          }
            }
        
        - lambda: id(init_led).press();
  - platform: template
    name: "color_blue_set"
    id: "blue_set"
    optimistic: true
    min_value: 0
    max_value: 255
    step: 1
    set_action:
      then:
        - lambda: |-
            auto index = id(light_select).active_index();
            switch(index.value())
            {
            case 0:{
                id(l1_on)[2] = x;
                break;
                    }
            case 1:{
                id(l2_on)[2] = x;
                break;
                    }
            case 2:{
                id(l3_on)[2] = x;
                break;
                    }
            case 3:{
                id(l4_on)[2] = x;
                break;
                    }
            case 4:{
                id(l5_on)[2] = x;
                break;
                    }
            case 5:{
                id(l6_on)[2] = x;
                break;
                    }
            case 6:{
                id(backlight_on)[2] = x;
                break;
                    }
            case 7:{
                id(l1_on)[2] = x;
                id(l2_on)[2] = x;
                id(l3_on)[2] = x;
                id(l4_on)[2] = x;
                id(l5_on)[2] = x;
                id(l6_on)[2] = x;
                break;
                    }
            default:{
                    break;
                          }
            }
        
        - lambda: id(init_led).press();





text_sensor:
  - platform: template
    name: "Template_button"
    id: "Template_button"
    lambda: |-
      return {"none"};
    update_interval: 1h




output:        
      
  - platform: gpio # 1号继电器
    id: out_relay1_1
    pin: 
      number: $relay_pin_1_1
      inverted: false
  - platform: gpio # 1号继电器
    id: out_relay1_2
    pin: 
      number: $relay_pin_1_2
      inverted: false



  - platform: template
    id: out_light_up_left
    type: binary
    write_action:
      - if:
          condition:
            lambda: return (state > 0);
          then:
            - light.addressable_set:
                id: ws_light
                range_from: 0
                range_to: 0
                red: !lambda return float(id(l1_on)[0]) / 256;
                green: !lambda return float(id(l1_on)[1]) / 256;
                blue: !lambda return float(id(l1_on)[2]) / 256;
                color_brightness: !lambda return float(id(brightness_on))/256;
          else:
            - if:
                condition:
                  light.is_on: _light_back
                then:
                  - light.addressable_set:
                      id: ws_light
                      range_from: 0
                      range_to: 0
                      red: !lambda return float(id(backlight_on)[0]) / 256;
                      green: !lambda return float(id(backlight_on)[1]) / 256;
                      blue: !lambda return float(id(backlight_on)[2]) / 256;
                      color_brightness: !lambda return float(id(brightness_on))/256;
                else:
                  - light.addressable_set:
                      id: ws_light
                      range_from: 0
                      range_to: 0
                      red: 0%
                      green: 0%
                      blue: 0%

  - platform: template
    id: out_light_up_mid
    type: binary
    write_action:
      - if:
          condition:
            lambda: return (state > 0);
          then:
            - light.addressable_set:
                id: ws_light
                range_from: 1
                range_to: 1
                red: !lambda return float(id(l2_on)[0]) / 256;
                green: !lambda return float(id(l2_on)[1]) / 256;
                blue: !lambda return float(id(l2_on)[2]) / 256;
                color_brightness: !lambda return float(id(brightness_on))/256;
          else:
            - if:
                condition:
                  light.is_on: _light_back
                then:
                  - light.addressable_set:
                      id: ws_light
                      range_from: 1
                      range_to: 1
                      red: !lambda return float(id(backlight_on)[0]) / 256;
                      green: !lambda return float(id(backlight_on)[1]) / 256;
                      blue: !lambda return float(id(backlight_on)[2]) / 256;
                      color_brightness: !lambda return float(id(brightness_on))/256;
                else:
                  - light.addressable_set:
                      id: ws_light
                      range_from: 1
                      range_to: 1
                      red: 0%
                      green: 0%
                      blue: 0%

  - platform: template
    id: out_light_up_right
    type: binary
    write_action:
      - if:
          condition:
            lambda: return (state > 0);
          then:
            - light.addressable_set:
                id: ws_light
                range_from: 2
                range_to: 2
                red: !lambda return float(id(l3_on)[0]) / 256;
                green: !lambda return float(id(l3_on)[1]) / 256;
                blue: !lambda return float(id(l3_on)[2]) / 256;
                color_brightness: !lambda return float(id(brightness_on))/256;
          else:
            - if:
                condition:
                  light.is_on: _light_back
                then:
                  - light.addressable_set:
                      id: ws_light
                      range_from: 2
                      range_to: 2
                      red: !lambda return float(id(backlight_on)[0]) / 256;
                      green: !lambda return float(id(backlight_on)[1]) / 256;
                      blue: !lambda return float(id(backlight_on)[2]) / 256;
                      color_brightness: !lambda return float(id(brightness_on))/256;
                else:
                  - light.addressable_set:
                      id: ws_light
                      range_from: 2
                      range_to: 2
                      red: 0%
                      green: 0%
                      blue: 0%

  - platform: template
    id: out_light_down_left
    type: binary
    write_action:
      - if:
          condition:
            lambda: return (state > 0);
          then:
            - light.addressable_set:
                id: ws_light
                range_from: 5
                range_to: 5
                red: !lambda return float(id(l4_on)[0]) / 256;
                green: !lambda return float(id(l4_on)[1]) / 256;
                blue: !lambda return float(id(l4_on)[2]) / 256;
                color_brightness: !lambda return float(id(brightness_on))/256;
          else:
            - if:
                condition:
                  light.is_on: _light_back
                then:
                  - light.addressable_set:
                      id: ws_light
                      range_from: 5
                      range_to: 5
                      red: !lambda return float(id(backlight_on)[0]) / 256;
                      green: !lambda return float(id(backlight_on)[1]) / 256;
                      blue: !lambda return float(id(backlight_on)[2]) / 256;
                      color_brightness: !lambda return float(id(brightness_on))/256;
                else:
                  - light.addressable_set:
                      id: ws_light
                      range_from: 5
                      range_to: 5
                      red: 0%
                      green: 0%
                      blue: 0%

  - platform: template
    id: out_light_down_mid
    type: binary
    write_action:
      - if:
          condition:
            lambda: return (state > 0);
          then:
            - light.addressable_set:
                id: ws_light
                range_from: 4
                range_to: 4
                red: !lambda return float(id(l5_on)[0] )/ 256;
                green: !lambda return float(id(l5_on)[1] )/ 256;
                blue: !lambda return float(id(l5_on)[2] )/ 256;
                color_brightness: !lambda return float(id(brightness_on))/256;
          else:
            - if:
                condition:
                  light.is_on: _light_back
                then:
                  - light.addressable_set:
                      id: ws_light
                      range_from: 4
                      range_to: 4
                      red: !lambda return float(id(backlight_on)[0]) / 256;
                      green: !lambda return float(id(backlight_on)[1]) / 256;
                      blue: !lambda return float(id(backlight_on)[2]) / 256;
                      color_brightness: !lambda return float(id(brightness_on))/256;
                else:
                  - light.addressable_set:
                      id: ws_light
                      range_from: 4
                      range_to: 4
                      red: 0%
                      green: 0%
                      blue: 0%

  - platform: template
    id: out_light_down_right
    type: binary
    write_action:
      - if:
          condition:
            lambda: return (state > 0);
          then:
            - light.addressable_set:
                id: ws_light
                range_from: 3
                range_to: 3
                red: !lambda return float(id(l6_on)[0]) / 256;
                green: !lambda return float(id(l6_on)[1]) / 256;
                blue: !lambda return float(id(l6_on)[2]) / 256;
                color_brightness: !lambda return float(id(brightness_on))/256;
          else:
            - if:
                condition:
                  light.is_on: _light_back
                then:
                  - light.addressable_set:
                      id: ws_light
                      range_from: 3
                      range_to: 3
                      red: !lambda return float(id(backlight_on)[0]) / 256;
                      green: !lambda return float(id(backlight_on)[1]) / 256;
                      blue: !lambda return float(id(backlight_on)[2]) / 256;
                      color_brightness: !lambda return float(id(brightness_on))/256;
                else:
                  - light.addressable_set:
                      id: ws_light
                      range_from: 3
                      range_to: 3
                      red: 0%
                      green: 0%
                      blue: 0%

  - platform: template
    id: out_light_back
    type: binary
    write_action:
      - if:
          condition:
            light.is_off: light_up_left
          then:
            - if :
                condition:
                  lambda: return (state > 0);
                then:
                  - light.addressable_set:
                      id: ws_light
                      range_from: 0
                      range_to: 0
                      red: !lambda return float(id(backlight_on)[0]) / 256;
                      green: !lambda return float(id(backlight_on)[1]) / 256;
                      blue: !lambda return float(id(backlight_on)[2]) / 256;
                      color_brightness: !lambda return float(id(brightness_on))/256;
                else:
                  - light.addressable_set:
                      id: ws_light
                      range_from: 0
                      range_to: 0
                      red: 0%
                      green: 0%
                      blue: 0%
      - if:
          condition:
            light.is_off: light_up_mid
          then:
            - if :
                condition:
                  lambda: return (state > 0);
                then:
                  - light.addressable_set:
                      id: ws_light
                      range_from: 1
                      range_to: 1
                      red: !lambda return float(id(backlight_on)[0]) / 256;
                      green: !lambda return float(id(backlight_on)[1]) / 256;
                      blue: !lambda return float(id(backlight_on)[2]) / 256;
                      color_brightness: !lambda return float(id(brightness_on))/256;
                else:
                  - light.addressable_set:
                      id: ws_light
                      range_from: 1
                      range_to: 1
                      red: 0%
                      green: 0%
                      blue: 0%
      - if:
          condition:
            light.is_off: light_up_right
          then:
            - if :
                condition:
                  lambda: return (state > 0);
                then:
                  - light.addressable_set:
                      id: ws_light
                      range_from: 2
                      range_to: 2
                      red: !lambda return float(id(backlight_on)[0]) / 256;
                      green: !lambda return float(id(backlight_on)[1]) / 256;
                      blue: !lambda return float(id(backlight_on)[2]) / 256;
                      color_brightness: !lambda return float(id(brightness_on))/256;
                else:
                  - light.addressable_set:
                      id: ws_light
                      range_from: 2
                      range_to: 2
                      red: 0%
                      green: 0%
                      blue: 0%

      - if:
          condition:
            light.is_off: light_down_left
          then:
            - if :
                condition:
                  lambda: return (state > 0);
                then:
                  - light.addressable_set:
                      id: ws_light
                      range_from: 5
                      range_to: 5
                      red: !lambda return float(id(backlight_on)[0]) / 256;
                      green: !lambda return float(id(backlight_on)[1]) / 256;
                      blue: !lambda return float(id(backlight_on)[2]) / 256;
                      color_brightness: !lambda return float(id(brightness_on))/256;
                else:
                  - light.addressable_set:
                      id: ws_light
                      range_from: 5
                      range_to: 5
                      red: 0%
                      green: 0%
                      blue: 0%

      - if:
          condition:
            light.is_off: light_down_mid
          then:
            - if :
                condition:
                  lambda: return (state > 0);
                then:
                  - light.addressable_set:
                      id: ws_light
                      range_from: 4
                      range_to: 4
                      red: !lambda return float(id(backlight_on)[0]) / 256;
                      green: !lambda return float(id(backlight_on)[1]) / 256;
                      blue: !lambda return float(id(backlight_on)[2]) / 256;
                      color_brightness: !lambda return float(id(brightness_on))/256;
                else:
                  - light.addressable_set:
                      id: ws_light
                      range_from: 4
                      range_to: 4
                      red: 0%
                      green: 0%
                      blue: 0%

      - if:
          condition:
            light.is_off: light_down_right
          then:
            - if :
                condition:
                  lambda: return (state > 0);
                then:
                  - light.addressable_set:
                      id: ws_light
                      range_from: 3
                      range_to: 3
                      red: !lambda return float(id(backlight_on)[0]) / 256;
                      green: !lambda return float(id(backlight_on)[1]) / 256;
                      blue: !lambda return float(id(backlight_on)[2]) / 256;
                      color_brightness: !lambda return float(id(brightness_on))/256;
                else:
                  - light.addressable_set:
                      id: ws_light
                      range_from: 3
                      range_to: 3
                      red: 0%
                      green: 0%
                      blue: 0%


switch:


  - platform: template    # 1号继电器   下左
    name: "relay_L1"
    id: "relay_L1"
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    lambda: return id(flag_r1_state);
    turn_on_action:

      - if:
          condition:
            lambda: 'return ((not id(turn_on_r1).is_running()) and  (not id(turn_off_r1).is_running()) );'
          then:
            - script.execute: turn_on_r1

            - lambda: |-
                id(flag_r1_state)=1;
                id(relay_L1).publish_state(1);


    turn_off_action:
      - if:
          condition:
            lambda: 'return ((not id(turn_on_r1).is_running()) and  (not id(turn_off_r1).is_running()) );'
          then:
            - script.execute: turn_off_r1

            - lambda: |-
                id(flag_r1_state)=0;
                id(relay_L1).publish_state(0);

    on_turn_on: 
      then:
        - lambda: |-
            auto index = id(switch1_connect).active_index();
            switch(index.value()+1)
            {
            case 1:{
                    auto call = id(light_up_left).turn_on();
                    call.perform();
                    break;
                          }
            case 2:{
                    auto call = id(light_up_mid).turn_on();
                    call.perform();
                    break;
                          }
            case 3:{
                    auto call = id(light_up_right).turn_on();
                    call.perform();
                    break;
                          }
            case 4:{
                    auto call = id(light_down_left).turn_on();
                    call.perform();
                    break;
                          }
            case 5:{
                    auto call = id(light_down_mid).turn_on();
                    call.perform();
                    break;
                          }
            case 6:{
                    auto call = id(light_down_right).turn_on();
                    call.perform();
                    break;
                          }
            default:{
                    break;
                          }
            } 
    on_turn_off: 
      then:
        - lambda: |-
            auto index = id(switch1_connect).active_index();
            switch(index.value()+1)
            {
            case 1:{
                    auto call = id(light_up_left).turn_off();
                    call.perform();
                    break;
                          }
            case 2:{
                    auto call = id(light_up_mid).turn_off();
                    call.perform();
                    break;
                          }
            case 3:{
                    auto call = id(light_up_right).turn_off();
                    call.perform();
                    break;
                          }
            case 4:{
                    auto call = id(light_down_left).turn_off();
                    call.perform();
                    break;
                          }
            case 5:{
                    auto call = id(light_down_mid).turn_off();
                    call.perform();
                    break;
                          }
            case 6:{
                    auto call = id(light_down_right).turn_off();
                    call.perform();
                    break;
                          }
            default:{
                    break;
                          }
            } 
  

light: 
  - platform: esp32_rmt_led_strip
    rgb_order: GRB
    rmt_channel: 0
    chipset: ws2812
    pin: $light_pin_1
    internal: true
    num_leds: 6
    name: "ws_light"
    id: "ws_light"
    effects:
      - addressable_rainbow:
          name: "addressable_rainbow"
          speed : 10
          width : 6
      - addressable_color_wipe:
          name: "addressable_color_wipe"
      - addressable_scan:
          name: "addressable_scan"
      - addressable_twinkle:
          name: "addressable_twinkle"
      - addressable_random_twinkle:
          name: "addressable_random_twinkle"


  - platform: binary
    name: "_light_back"
    output: out_light_back
    id: _light_back
    internal: false
    effects:
      - strobe:



  - platform: binary # 1号指示灯 上左  
    name: "light_up_left" 
    output: out_light_up_left
    id: light_up_left
    restore_mode: RESTORE_DEFAULT_OFF

    internal: false #是否对外隐藏（true/false）
    

  - platform: binary # 2号指示灯 上中
    name: "light_up_mid" 
    output: out_light_up_mid 
    id: light_up_mid
    restore_mode: RESTORE_DEFAULT_OFF

    internal: false #是否对外隐藏（true/false）

  - platform: binary # 3号指示灯 上右
    name: "light_up_right" 
    output: out_light_up_right 
    id: light_up_right 
    restore_mode: RESTORE_DEFAULT_OFF

    internal: false #是否对外隐藏（true/false）

  - platform: binary # 4号指示灯 下左
    name: "light_down_left" 
    output: out_light_down_left
    id: light_down_left
    restore_mode: RESTORE_DEFAULT_OFF

    internal: false #是否对外隐藏（true/false）

  - platform: binary # 5号指示灯 下中
    name: "light_down_mid" 
    output: out_light_down_mid 
    id: light_down_mid
    restore_mode: RESTORE_DEFAULT_OFF
    internal: false #是否对外隐藏（true/false）

  - platform: binary # 6号指示灯 下右
    name: "light_down_right " 
    output: out_light_down_right 
    id: light_down_right
    restore_mode: RESTORE_DEFAULT_OFF
    internal: false #是否对外隐藏（true/false）

binary_sensor:
  - platform: gpio  #上左
    name: "key_up_left"
    id: key_up_left
    internal: True #是否对外隐藏（true/false）
    pin:
      number: $key_1  #按键引脚1
      mode: INPUT_PULLUP
      inverted: True
    filters:
      - delayed_on: 50ms
      - delayed_off: 50ms
      - delayed_on_off: 50ms  #延迟开关：仅当二进制传感器至少在指定的时间段内保持在相同状态时，才发送打开或关闭值。用于解除二进制开关的抖动
    on_multi_click:
      - timing: 
          - ON for at most 1s
          - OFF for at least 0.3s
        then:
          - lambda: |-
                auto index = id(switch1_connect).active_index();
                if (index.value()==0)
                    {
                        id(relay_L1).toggle();
                    }
          - lambda: |-   
              id(Template_button).publish_state("up_left_short_clicked");
              id(Template_button).publish_state("none");

          - output.turn_on: out_light_up_left
          - delay: 200ms
          - output.turn_off: out_light_up_left
          - delay: 200ms
          - output.turn_on: out_light_up_left
          - delay: 200ms
          - output.turn_off: out_light_up_left

          - if:
              condition:
                and:
                  - light.is_on: light_up_left
              then:
                - output.turn_on: out_light_up_left

      - timing:
            - ON for at most 1s
            - OFF for at most 1s
            - ON for at most 1s
            - OFF for at least 0.1s
        then:
          - lambda: |-   
              id(Template_button).publish_state("up_left_double_clicked");
              id(Template_button).publish_state("none");
      - timing:
          - ON for 1s to 5s
          - OFF for at least 0.1s
        then:
          - lambda: |-   
              id(Template_button).publish_state("up_left_long_clicked");
              id(Template_button).publish_state("none");

              
      

  - platform: gpio  #上中
    name: "key_up_mid"
    id: key_up_mid
    internal: True #是否对外隐藏（true/false）
    pin:
      number: $key_2  #按键引脚1
      mode: INPUT_PULLUP
      inverted: True
    filters:
      - delayed_on: 50ms
      - delayed_off: 50ms
      - delayed_on_off: 50ms  #延迟开关：仅当二进制传感器至少在指定的时间段内保持在相同状态时，才发送打开或关闭值。用于解除二进制开关的抖动
    on_multi_click:
      - timing: 
          - ON for at most 1s
          - OFF for at least 0.3s
        then:
          - lambda: |-
                auto index = id(switch1_connect).active_index();
                if (index.value()==1)
                    {
                        id(relay_L1).toggle();
                    }
          - lambda: |-   
              id(Template_button).publish_state("up_mid_short_clicked");
              id(Template_button).publish_state("none");

          - output.turn_on: out_light_up_mid
          - delay: 200ms
          - output.turn_off: out_light_up_mid
          - delay: 200ms
          - output.turn_on: out_light_up_mid
          - delay: 200ms
          - output.turn_off: out_light_up_mid

          - if:
              condition:
                and:
                  - light.is_on: light_up_mid
              then:
                - output.turn_on: out_light_up_mid

      - timing:
            - ON for at most 1s
            - OFF for at most 1s
            - ON for at most 1s
            - OFF for at least 0.1s
        then:
          - lambda: |-   
              id(Template_button).publish_state("up_mid_double_clicked");
              id(Template_button).publish_state("none");
      - timing:
          - ON for 1s to 5s
          - OFF for at least 0.1s
        then:
          - lambda: |-   
              id(Template_button).publish_state("up_mid_long_clicked");
              id(Template_button).publish_state("none");


          
  - platform: gpio #上右
    name: "key_up_right"
    id: key_up_right
    internal: True #是否对外隐藏（true/false）
    pin:
      number: $key_3  #按键引脚1
      mode: INPUT_PULLUP
      inverted: True
    on_multi_click:
      - timing: 
          - ON for at most 1s
          - OFF for at least 0.3s
        then:
          - lambda: |-
                auto index = id(switch1_connect).active_index();
                if (index.value()==2)
                    {
                        id(relay_L1).toggle();
                    }
          - lambda: |-   
              id(Template_button).publish_state("up_right_short_clicked");
              id(Template_button).publish_state("none");

          - output.turn_on: out_light_up_right
          - delay: 200ms
          - output.turn_off: out_light_up_right
          - delay: 200ms
          - output.turn_on: out_light_up_right
          - delay: 200ms
          - output.turn_off: out_light_up_right

          - if:
              condition:
                and:
                  - light.is_on: light_up_right
              then:
                - output.turn_on: out_light_up_right

      - timing:
            - ON for at most 1s
            - OFF for at most 1s
            - ON for at most 1s
            - OFF for at least 0.1s
        then:
          - lambda: |-   
              id(Template_button).publish_state("up_right_double_clicked");
              id(Template_button).publish_state("none");
      - timing:
          - ON for 1s to 5s
          - OFF for at least 0.1s
        then:
          - lambda: |-   
              id(Template_button).publish_state("up_right_long_clicked");
              id(Template_button).publish_state("none");





  - platform: gpio  #下左
    name: "key_down_left"
    id: key_down_left
    internal: true
    pin:
      number: $key_6  #按键引脚1
      mode: INPUT_PULLUP
      inverted: True
#    filters:
#      - invert:  #反转：，它只对来自二进制传感器的每个值进行反转。
#      - delayed_on: 50ms
#      - delayed_off: 50ms
#      - delayed_on_off: 50ms  #延迟开关：仅当二进制传感器至少在指定的时间段内保持在相同状态时，才发送打开或关闭值。用于解除二进制开关的抖动
    on_multi_click:
      - timing: 
          - ON for at most 1s
          - OFF for at least 0.3s
        then:
          - lambda: |-
                auto index = id(switch1_connect).active_index();
                if (index.value()==3)
                    {
                        id(relay_L1).toggle();
                    }
          - lambda: |-   
              id(Template_button).publish_state("down_left_short_clicked");
              id(Template_button).publish_state("none");

          - output.turn_on: out_light_down_left
          - delay: 200ms
          - output.turn_off: out_light_down_left
          - delay: 200ms
          - output.turn_on: out_light_down_left
          - delay: 200ms
          - output.turn_off: out_light_down_left

          - if:
              condition:
                and:
                  - light.is_on: light_down_left
              then:
                - output.turn_on: out_light_down_left


      - timing:
            - ON for at most 1s
            - OFF for at most 1s
            - ON for at most 1s
            - OFF for at least 0.1s
        then:
          - lambda: |-   
              id(Template_button).publish_state("down_left_double_clicked");
              id(Template_button).publish_state("none");
      - timing:
          - ON for 1s to 5s
          - OFF for at least 0.1s
        then:
          - lambda: |-   
              id(Template_button).publish_state("down_left_long_clicked");
              id(Template_button).publish_state("none");




      
  - platform: gpio   #下中
    name: "key_down_mid"
    id: key_down_mid
    internal: true
    pin:
      number: $key_5 #按键引脚1
      mode: INPUT_PULLUP
      inverted: True
    on_multi_click:
      - timing: 
          - ON for at most 1s
          - OFF for at least 0.3s
        then:
          - lambda: |-
                auto index = id(switch1_connect).active_index();
                if (index.value()==4)
                    {
                        id(relay_L1).toggle();
                    }
          - lambda: |-   
              id(Template_button).publish_state("down_mid_short_clicked");
              id(Template_button).publish_state("none");
          - output.turn_on: out_light_down_mid
          - delay: 200ms
          - output.turn_off: out_light_down_mid
          - delay: 200ms
          - output.turn_on: out_light_down_mid
          - delay: 200ms
          - output.turn_off: out_light_down_mid
          - if:
              condition:
                and:
                  - light.is_on: light_down_mid
              then:
                - output.turn_on: out_light_down_mid


      - timing:
            - ON for at most 1s
            - OFF for at most 1s
            - ON for at most 1s
            - OFF for at least 0.1s
        then:
          - lambda: |-   
              id(Template_button).publish_state("down_mid_double_clicked");
              id(Template_button).publish_state("none");
      - timing:
          - ON for 1s to 5s
          - OFF for at least 0.1s
        then:
          - lambda: |-   
              id(Template_button).publish_state("down_mid_long_clicked");
              id(Template_button).publish_state("none");
      
      
  - platform: gpio   #下右
    name: "key_down_right"
    id: key_down_right
    internal: true
    pin:
      number: $key_4  #按键引脚1
      mode: INPUT_PULLUP
      inverted: True
    on_multi_click:
      - timing: 
          - ON for at most 1s
          - OFF for at least 0.3s
        then:
          - lambda: |-
                auto index = id(switch1_connect).active_index();
                if (index.value()==5)
                    {
                        id(relay_L1).toggle();
                    }
          - lambda: |-   
              id(Template_button).publish_state("down_right_short_clicked");
              id(Template_button).publish_state("none");

          - output.turn_on: out_light_down_right
          - delay: 200ms
          - output.turn_off: out_light_down_right
          - delay: 200ms
          - output.turn_on: out_light_down_right
          - delay: 200ms
          - output.turn_off: out_light_down_right

          - if:
              condition:
                and:
                  - light.is_on: light_down_right
              then:
                - output.turn_on: out_light_down_right

      - timing:
            - ON for at most 1s
            - OFF for at most 1s
            - ON for at most 1s
            - OFF for at least 0.1s
        then:
          - lambda: |-   
              id(Template_button).publish_state("down_right_double_clicked");
              id(Template_button).publish_state("none");
      - timing:
          - ON for 1s to 5s
          - OFF for at least 0.1s
        then:
          - lambda: |-   
              id(Template_button).publish_state("down_right_long_clicked");
              id(Template_button).publish_state("none");
          - light.toggle: _light_back
          - lambda: |-
              auto index = id(sun_mode).active_index();
              if (index.has_value() and index.value()==0){
                auto call = id(sun_mode).make_call();
                call.set_index(1);
                call.perform();
              }
  - platform: gpio
    name: "r1_state"
    id: "r1_state"
    device_class: window
    internal: false #是否对外隐藏（true/false）
    pin:
      number: $relay_state_1  #按键引脚1
      inverted: true
    on_press:
      then:
        - lambda: |-
            id(flag_r1_state)=1;
            id(relay_L1).publish_state(1);
    on_release:
      then:
        - lambda: |-
            id(flag_r1_state)=0;
            id(relay_L1).publish_state(0);


script:
  - id: turn_off_r1
    then:
      - output.turn_on: out_relay1_1
      - delay: $relay_s
      - output.turn_off: out_relay1_1
  - id: turn_on_r1
    then:
      - output.turn_on: out_relay1_2
      - delay: $relay_s
      - output.turn_off: out_relay1_2


